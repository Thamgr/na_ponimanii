import logging
import httpx
import json
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from config import TOKEN, API_HOST, API_PORT

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)

# Define a function to handle the /start command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /start is issued."""
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –±–æ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /add <—Ç–µ–º–∞> —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π /list —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ —Ç–µ–º—ã. –ò—Å–ø–æ–ª—å–∑—É–π /topic —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π —Ç–µ–º—ã.')

# Define a function to handle messages
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Forward the entire update to the FastAPI server."""
    # Convert the update to a dictionary
    update_dict = update.to_dict()
    
    # Send the update to the FastAPI server
    try:
        webhook_url = f"http://{API_HOST}:{API_PORT}/webhook"
        async with httpx.AsyncClient() as client:
            response = await client.post(webhook_url, json=update_dict)
            
            if response.status_code == 200:
                response_data = response.json()
                logger.info(f"Received response from server: {response_data}")
                # Note: We don't need to reply here as the server will send the response directly
            else:
                error_text = response.text
                logger.error(f"Error from server: {error_text}")
                await update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.')
    except Exception as e:
        logger.error(f"Failed to send update to server: {e}")
        await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')

# Define a function to handle the /add command
async def add_topic_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle the /add command to add a new topic."""
    # Get the user ID
    user_id = update.effective_user.id
    
    # Get the command text
    message_text = update.message.text
    
    # Extract the topic title (everything after /add)
    topic_title = ""
    if len(message_text.split()) > 1:
        topic_title = message_text.split(' ', 1)[1].strip()
    
    # Check if topic title is empty
    if not topic_title:
        await update.message.reply_text('–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ç–µ–º—É –ø–æ—Å–ª–µ /add')
        return
    
    # Prepare the data to send to the FastAPI server
    data = {
        "user_id": user_id,
        "topic_title": topic_title
    }
    
    # Send the request to the FastAPI server
    try:
        add_topic_url = f"http://{API_HOST}:{API_PORT}/bot/add_topic"
        async with httpx.AsyncClient() as client:
            response = await client.post(add_topic_url, json=data)
            
            if response.status_code == 200:
                response_data = response.json()
                logger.info(f"Add topic processed: {response_data}")
                
                # Format and send message to the user
                topic_id = response_data['id']
                await update.message.reply_text(
                    f"–¢–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {response_data['title']}\n\n"
                    f"–Ø –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —ç—Ç–æ–π —Ç–µ–º—ã. –°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –µ–≥–æ —É–≤–∏–¥–µ—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /topic {topic_id}"
                )
            else:
                error_text = response.text
                logger.error(f"Error from server: {error_text}")
                await update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–º—ã.')
    except Exception as e:
        logger.error(f"Failed to send add topic request to server: {e}")
        await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')

# Define a function to handle the /list command
async def list_topics_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle the /list command to list user's topics."""
    # Get the user ID
    user_id = update.effective_user.id
    
    # Prepare the data to send to the FastAPI server
    data = {
        "user_id": user_id
    }
    
    # Send the request to the FastAPI server
    try:
        list_topics_url = f"http://{API_HOST}:{API_PORT}/bot/list_topics"
        async with httpx.AsyncClient() as client:
            response = await client.post(list_topics_url, json=data)
            
            if response.status_code == 200:
                response_data = response.json()
                logger.info(f"List topics processed: {response_data}")
                
                # Format and send message to the user
                topics = response_data.get('topics', [])
                
                if topics:
                    # Format the topics list
                    topics_text = "–í–∞—à–∏ —Ç–µ–º—ã:\n\n"
                    for topic in topics:
                        topic_id = topic['id']
                        has_explanation = topic.get('explanation') is not None
                        explanation_status = "‚úÖ" if has_explanation else "‚è≥"
                        topics_text += f"{topic_id}. {topic['title']} {explanation_status}\n"
                    
                    # Send the list
                    await update.message.reply_text(topics_text)
                else:
                    # No topics found
                    await update.message.reply_text('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–µ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add <—Ç–µ–º–∞> —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É.')
            else:
                error_text = response.text
                logger.error(f"Error from server: {error_text}")
                await update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ–º.')
    except Exception as e:
        logger.error(f"Failed to send list topics request to server: {e}")
        await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')

# Define a function to handle the /topic command
async def get_topic_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle the /topic command to get a random topic explanation and remove it."""
    # Get the user ID
    user_id = update.effective_user.id
    
    # Prepare the data to send to the FastAPI server
    data = {
        "user_id": user_id
    }
    
    # Send the request to the FastAPI server
    try:
        random_topic_url = f"http://{API_HOST}:{API_PORT}/bot/random_topic"
        async with httpx.AsyncClient() as client:
            response = await client.post(random_topic_url, json=data)
            
            if response.status_code == 200:
                # Check if we got a topic
                if not response.content or response.content == b'null':
                    await update.message.reply_text('–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–µ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add <—Ç–µ–º–∞> —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.')
                    return
                
                topic_data = response.json()
                logger.info(f"Random topic processed: {topic_data}")
                
                # Format and send message to the user
                title = topic_data['title']
                explanation = topic_data.get('explanation')
                
                if explanation:
                    # Prepare the message
                    message = f"üìö –¢–µ–º–∞: {title}\n\n{explanation}\n\n"
                    
                    # Add related topics if available
                    related_topics = topic_data.get('related_topics', [])
                    if related_topics:
                        message += "–°–º–µ–∂–Ω—ã–µ —Ç–µ–º—ã:\n"
                        for i, related_topic in enumerate(related_topics, 1):
                            message += f"{i}. {related_topic}\n"
                        message += "\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–º—É –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /add <—Ç–µ–º–∞>\n\n"
                    
                    message += f"–≠—Ç–∞ —Ç–µ–º–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞."
                    
                    # Send the message
                    await update.message.reply_text(message)
                else:
                    # No explanation available
                    await update.message.reply_text(
                        f"üìö –¢–µ–º–∞: {title}\n\n"
                        f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã.\n\n"
                        f"–≠—Ç–∞ —Ç–µ–º–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ç–µ–º—ã."
                    )
            else:
                error_text = response.text
                logger.error(f"Error from server: {error_text}")
                await update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–º—ã.')
    except Exception as e:
        logger.error(f"Failed to send random topic request to server: {e}")
        await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')

# Main function to run the bot
def main() -> None:
    """Start the bot."""
    # Create the Application and pass it your bot's token from config.py
    application = Application.builder().token(TOKEN).build()

    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("add", add_topic_command))
    application.add_handler(CommandHandler("list", list_topics_command))
    application.add_handler(CommandHandler("topic", get_topic_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # Run the bot until the user presses Ctrl-C
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
